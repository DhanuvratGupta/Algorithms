//https://leetcode.com/problems/populating-next-right-pointers-in-each-node/description/?envType=study-plan&id=algorithm-i
/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

public class Solution {
    public Node connect(Node root) {
        if (root == null) return null;
        Queue<Node> q = new LinkedList<Node>();
        q.add(root);
        while (!q.isEmpty()) {
            int size = q.size()-1;
            Node pre = q.remove();
            for (int i = 0; i <= size; i++) {
                if (pre.left != null) q.add(pre.left);
                if (pre.right != null) q.add(pre.right);
                if (i == size) {
                    pre.next = null;
                    break;
                }
                
                pre.next = q.peek();
                pre = q.remove();
            } 
        }
        return root;
    }
}
